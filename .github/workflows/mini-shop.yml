name: Build, Test, and Deploy Mini Shop Management System

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  build-test-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write  # Needed to push Docker images to registries

    steps:
      # Step 1: Checkout the Code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" \
            -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version

      # Step 3: Set up JDK 17 for Java Applications
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      # Step 4: Cache Maven Dependencies for Faster Builds
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 5: Build the Java Application
      - name: Build and Test with Maven
        run: mvn clean package

      # Step 6: Create .env File
      - name: Create .env File
        run: |
          echo "POSTGRES_DEV_DB=${{ secrets.POSTGRES_DEV_DB }}" >> .env
          echo "POSTGRES_DEV_USER=${{ secrets.POSTGRES_DEV_USER }}" >> .env
          echo "POSTGRES_DEV_PASSWORD=${{ secrets.POSTGRES_DEV_PASSWORD }}" >> .env
          echo "MONGO_ROOT_USERNAME=${{ secrets.MONGO_ROOT_USERNAME }}" >> .env
          echo "MONGO_ROOT_PASSWORD=${{ secrets.MONGO_ROOT_PASSWORD }}" >> .env
        shell: bash

      # Step 7: Start Required Services with Docker Compose
      - name: Start Services with Docker Compose
        run: |
#          docker-compose -f docker-compose.yml up -d postgres_dev
          docker-compose -f docker-compose.yml up -d shop-management-system_dev

      # Step 8: Wait for Services to Initialize
      - name: Wait for Services
        run: sleep 30

      # Step 9: Test Health Endpoint
      - name: Test Health Endpoint
        run: |
          curl -f http://localhost:8082/actuator/health || (docker-compose logs shop-management-system_dev && exit 1)

      # Step 10: Tear Down Docker Compose
      - name: Tear Down Docker Compose
        run: docker-compose -f docker-compose.yml down

      # Step 11: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 12: Build and Push Docker Image
      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/mini-shop-management-system:latest \
                       -t ${{ secrets.DOCKER_USERNAME }}/mini-shop-management-system:${{ github.run_number }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/mini-shop-management-system:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/mini-shop-management-system:${{ github.run_number }}