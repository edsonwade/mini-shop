name: Build, Test, and Deploy Mini Shop Management System

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  build-test-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      # Step 1: Checkout the Code
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      # Step 2: Validate Essential Files
      - name: Validate Essential Files
        run: |
          if [ ! -f "pom.xml" ]; then
            echo "Error: pom.xml not found!"
            exit 1
          fi
          if [ ! -f "Dockerfile" ]; then
            echo "Error: Dockerfile not found!"
            exit 1
          fi

      # Step 3: Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" \
            -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version

      # Step 4: Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: 'maven'

      # Step 5: Cache Maven Dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 6: Build and Test with Coverage
      - name: Build and Test with Maven
        run: |
          mvn clean verify
          if [ $? -ne 0 ]; then
            echo "Build or tests failed!"
            exit 1
          fi

      # Step 7: Check Test Coverage
      - name: Check Test Coverage
        run: |
          echo "Checking test coverage..."
          COVERAGE=$(mvn jacoco:report | grep -o "Total.*" | awk '{print $4}' | cut -d'%' -f1)
          if [ -n "$COVERAGE" ] && [ "$COVERAGE" -lt 80 ]; then
            echo "Warning: Test coverage is below 80%: $COVERAGE%"
            # Not failing the build, but warning
            echo "::warning::Test coverage is below recommended 80%"
          fi

      # Step 8: Docker Login
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 9: Build and Push Docker Image
      - name: Build and Push Docker Image
        run: |
          # Add build timestamp and git commit for traceability
          BUILD_DATE=$(date -u +'%Y-%m-%d_%H:%M:%S')
          GIT_COMMIT=$(git rev-parse --short HEAD)
          
          docker build \
            --build-arg BUILD_DATE="$BUILD_DATE" \
            --build-arg GIT_COMMIT="$GIT_COMMIT" \
            -t ${{ secrets.DOCKER_USERNAME }}/mini-shop-management-system:latest \
            -t ${{ secrets.DOCKER_USERNAME }}/mini-shop-management-system:${{ github.run_number }} .
          
          docker push ${{ secrets.DOCKER_USERNAME }}/mini-shop-management-system:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/mini-shop-management-system:${{ github.run_number }}

      # Step 10: Verify Docker Image
      - name: Verify Docker Image
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/mini-shop-management-system:latest
          docker inspect ${{ secrets.DOCKER_USERNAME }}/mini-shop-management-system:latest

      # Step 11: Tag Release if on main
      - name: Create Release Tag
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          CURRENT_DATE=$(date -u +'%Y.%m.%d')
          TAG_NAME="v${CURRENT_DATE}-${github.run_number}"
          git tag $TAG_NAME
          git push origin $TAG_NAME
          echo "Created and pushed tag: $TAG_NAME"